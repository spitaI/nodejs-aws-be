service: product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: eu-west-1

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        Ref: SNSTopic
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        - "${cf:import-service-${self:custom.stage}.SQSQueueArn}"

  environment:
    SNS_ARN:
      Ref: SNSTopic

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubsciption:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: alex.asm.1997@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          bookType:
            - "tiny"
    SNSSubsciption2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: sinner.in.me11@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          bookType:
            - "big"

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    excludeFiles: src/**/*.test.js
  stage: dev

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          method: get
          path: products/{id}
          cors: true
          request:
            parameters:
              paths:
                id: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          method: post
          path: products
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            - "${cf:import-service-${self:custom.stage}.SQSQueueArn}"
