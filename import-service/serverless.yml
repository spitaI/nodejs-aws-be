service: import-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: eu-west-1

  environment:
    SQS_URL:
      Ref: SQSQueue

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 's3:ListBucket'
      Resource:
        - 'arn:aws:s3:::spitai-import'
    - Effect: 'Allow'
      Action: 's3:*'
      Resource:
        - 'arn:aws:s3:::spitai-import/*'
    - Effect: 'Allow'
      Action: 'sqs:*'
      Resource:
        Fn::GetAtt: [SQSQueue, Arn]

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: 'ACCESS_DENIED'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: 'UNAUTHORIZED'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    excludeFiles: src/**/*.test.js
  stage: dev

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: get
          path: import
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: basicAuthorizer
            arn: "${cf:authorization-service-${self:custom.stage}.basicAuthorizerArn}"
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: 'spitai-import'
          event: 's3:ObjectCreated:*'
          rules:
            - prefix: 'uploaded/'
              suffix: '.csv'
          existing: true
              
